# Generated by Django 3.0.6 on 2020-05-25 03:28

from django.db import migrations, models
import django.db.models.deletion
from baseball.models import Sport, League, Conferences, Division, Venue, Team
import requests


def load_sports(apps, schema_editor):
    sports = requests.get('http://statsapi.mlb.com/api/v1/sports').json()['sports']
    for s in sports:
        Sport(mlb_api_sports_id=s['id'],
              code=s['code'],
              name=s['name'],
              abbreviation=s['abbreviation'],
              sort_order=s['sortOrder'],
              active=s['activeStatus']).save()


def load_leagues(apps, schema_editor):
    leagues = requests.get('http://statsapi.mlb.com/api/v1/league').json()['leagues']
    for l in leagues:
        try:
            League(mlb_api_league_id=l['id'], name=l['name'], abbreviation=l['abbreviation'],
                   name_short=l['nameShort'],
                   sport_id=Sport.objects.filter(mlb_api_sports_id=l['sport']['id'])[0],
                   sort_order=l['sortOrder'],
                   number_of_teams=l['numTeams']).save()
        except KeyError:
            League(mlb_api_league_id=l['id'], name=l['name'], abbreviation=l['abbreviation'],
                   name_short='None',
                   sport_id=Sport.objects.filter(mlb_api_sports_id=l['sport']['id'])[0],
                   sort_order=l['sortOrder'],
                   number_of_teams=0).save()


def load_conferences(apps, schema_editor):
    conferences = requests.get('http://statsapi.mlb.com/api/v1/conferences').json()['conferences']
    for c in conferences:
        Conferences(mlb_api_conference_id=c['id'], name=c['name'],
                    abbreviation=c['abbreviation'], name_short=c['nameShort'],
                    sport_id=Sport.objects.filter(mlb_api_sports_id=c['sport']['id'])[0],
                    league_id=League.objects.filter(mlb_api_league_id=c['league']['id'])[0]
                    ).save()


def load_divisions(apps, schema_editor):
    url = 'http://statsapi.mlb.com/api/v1/divisions'
    r = requests.get(url)
    divisions = r.json()['divisions']
    for division in divisions:
        Division(
            mlb_api_division_id=division['id'],
            name=division['name'],
            abbreviation=division['abbreviation'],
            name_short=division['nameShort'],
            sport_id=Sport.objects.filter(mlb_api_sports_id=division['sport']['id'])[0],
            league_id=League.objects.filter(mlb_api_league_id=division['league']['id'])[0]

        ).save()


def load_venues(apps, schema_editor):
    url = 'http://statsapi.mlb.com/api/v1/venues'
    r = requests.get(url)
    venues = r.json().get("venues")
    for v in venues:
        Venue(mlb_api_venue_id=v['id'], name=v['name']).save()


def load_teams(apps, schema_editor):
    for s in Sport.objects.all():
        if requests.get(f'http://statsapi.mlb.com/api/v1/teams?sportId={s.mlb_api_sports_id}').status_code == 200:
            teams = requests.get(f'http://statsapi.mlb.com/api/v1/teams?sportId={s.mlb_api_sports_id}').json()['teams']
            try:
                for t in teams:
                    Team(
                        mlb_api_team_id=t['id'],
                        name=t['name'],
                        venue_id=Venue.objects.filter(mlb_api_venue_id=t['venue']['id']).first(),
                        team_code=t['teamCode'],
                        file_code=t['fileCode'],
                        abbreviation=t['abbreviation'],
                        team_name=t.get('teamName'),
                        location_name=t.get('locationName'),
                        short_name=t['shortName'],
                        first_year_of_play=int(t['firstYearOfPlay']),
                        sport_id=Sport.objects.filter(mlb_api_sports_id=t['sport']['id']).first(),
                        league_id=League.objects.filter(mlb_api_league_id=t.get('league').get('id')).first(),
                        division_id=Division.objects.filter(mlb_api_division_id=t.get('division').get('id')).first()
                    ).save()
            except AttributeError:
                for t in teams:
                    Team(
                        mlb_api_team_id=t['id'],
                        name=t['name'],
                        venue_id=Venue.objects.filter(mlb_api_venue_id=t['venue']['id']).first(),
                        team_code=t['teamCode'],
                        file_code=t['fileCode'],
                        abbreviation=t['abbreviation'],
                        team_name=t.get('teamName'),
                        location_name=t.get('locationName'),
                        short_name=t['shortName'],
                        first_year_of_play=int(t['firstYearOfPlay']),
                        sport_id=Sport.objects.filter(mlb_api_sports_id=t['sport']['id']).first(),
                        league_id=League.objects.filter(mlb_api_league_id=t.get('league').get('id')).first(),
                    ).save()


class Migration(migrations.Migration):

    replaces = [('baseball', '0001_initial'), ('baseball', '0002_auto_20200523_1750'), ('baseball', '0003_auto_20200523_1751'), ('baseball', '0004_auto_20200523_2359')]

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='League',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abbreviation', models.CharField(blank=True, max_length=3, null=True)),
                ('mlb_api_league_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=33, null=True)),
                ('name_short', models.CharField(blank=True, max_length=16, null=True)),
                ('number_of_teams', models.IntegerField(blank=True, null=True)),
                ('sort_order', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Sport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mlb_api_sports_id', models.IntegerField()),
                ('code', models.CharField(max_length=100)),
                ('name', models.CharField(max_length=100)),
                ('abbreviation', models.CharField(max_length=100)),
                ('sort_order', models.IntegerField()),
                ('active', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='TeamHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mlb_api_venue_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=23, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Conferences',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abbreviation', models.CharField(blank=True, max_length=4, null=True)),
                ('league_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='baseball.League')),
                ('mlb_api_conference_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=22, null=True)),
                ('name_short', models.CharField(blank=True, max_length=11, null=True)),
                ('sport_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='baseball.Sport')),
            ],
        ),
        migrations.CreateModel(
            name='Division',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abbreviation', models.CharField(blank=True, max_length=6, null=True)),
                ('league_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='baseball.League')),
                ('mlb_api_division_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=15, null=True)),
                ('name_short', models.CharField(blank=True, max_length=15, null=True)),
                ('sport_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='baseball.Sport')),
            ],
        ),
        migrations.AddField(
            model_name='league',
            name='sport_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='baseball.Sport'),
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abbreviation', models.CharField(blank=True, max_length=3, null=True)),
                ('division_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='baseball.Division')),
                ('file_code', models.CharField(blank=True, max_length=3, null=True)),
                ('first_year_of_play', models.IntegerField(blank=True, null=True)),
                ('league_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='baseball.League')),
                ('location_name', models.CharField(blank=True, max_length=7, null=True)),
                ('mlb_api_team_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=15, null=True)),
                ('parent_organization_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='baseball.Team')),
                ('short_name', models.CharField(blank=True, max_length=5, null=True)),
                ('sport_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='baseball.Sport')),
                ('team_code', models.CharField(blank=True, max_length=3, null=True)),
                ('team_name', models.CharField(blank=True, max_length=14, null=True)),
                ('venue_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='baseball.Venue')),
            ],
        ),
        migrations.RunPython(load_sports),
        migrations.RunPython(load_leagues),
        migrations.RunPython(load_conferences),
        migrations.RunPython(load_divisions),
        migrations.RunPython(load_venues),
        migrations.RunPython(load_teams),
        migrations.AlterField(
            model_name='league',
            name='abbreviation',
            field=models.CharField(blank=True, default='None', max_length=3, null=True),
        ),
        migrations.AlterField(
            model_name='league',
            name='number_of_teams',
            field=models.IntegerField(blank=True, default=0, null=True),
        ),
    ]
